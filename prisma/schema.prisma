generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String              @id @default(uuid()) @db.Uuid
  email               String              @unique
  username            String
  password            String
  refreshToken        String
  refreshTokenExpires String
  images              Image[]
  comments            Comment[]
  stories             Story[]
  followedBy          Follows[]           @relation("follower")
  following           Follows[]           @relation("following")
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
}

model Follows {
  follower    User     @relation("follower", fields: [followerId], references: [id])
  followerId  String   @db.Uuid
  following   User     @relation("following", fields: [followingId], references: [id])
  followingId String   @db.Uuid
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@id([followerId, followingId])
}

model Story {
  id         String               @id @default(uuid()) @db.Uuid
  title      String
  resume     String?
  type       Type?
  isPublic   Boolean              @default(false)
  authorId   String               @db.Uuid
  stars      Int?
  categories StoryHasCategories[]
  chapters   Chapter[]
  characters Character[]
  locations  Location[]
  author     User?                @relation(fields: [authorId], references: [id])
  createdAt  DateTime             @default(now())
  updatedAt  DateTime             @updatedAt
}

enum Type {
  novel
  poetry
  short
}

model StoryHasCategories {
  categoryId String   @db.Uuid
  storyId    String   @db.Uuid
  story      Story    @relation(fields: [storyId], references: [id])
  category   Category @relation(fields: [categoryId], references: [id])

  @@id([storyId, categoryId])
}

model Category {
  id        String               @id @default(uuid()) @db.Uuid
  name      String               @unique
  stories   StoryHasCategories[]
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
}

model Image {
  id          String    @id @default(uuid()) @db.Uuid
  name        String    @unique
  description String
  role        ImageRole
  path        String
  userId      String    @db.Uuid
  user        User      @relation(fields: [userId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

enum ImageRole {
  avatar
  story
}

//implicit manyToMany between category and story ===> to test

model Chapter {
  id        String    @id @default(uuid()) @db.Uuid
  resume    String?
  title     String?
  content   String
  storyId   String    @db.Uuid
  story     Story     @relation(fields: [storyId], references: [id])
  comments  Comment[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Character {
  id                  String   @id @default(uuid()) @db.Uuid
  physicalDescription String
  personality         String
  distinctiveSigns    String
  storyId             String   @db.Uuid
  story               Story    @relation(fields: [storyId], references: [id])
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model Location {
  id          String   @id @default(uuid()) @db.Uuid
  name        String
  description String
  storyId     String   @db.Uuid
  story       Story    @relation(fields: [storyId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Comment {
  id                String   @id @default(uuid()) @db.Uuid
  content           String
  authorId          String   @db.Uuid
  chapterId         String   @db.Uuid
  responseToComment String   @db.Uuid
  author            User     @relation(fields: [authorId], references: [id])
  chapter           Chapter  @relation(fields: [chapterId], references: [id])
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}
