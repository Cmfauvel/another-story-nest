generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String              @id @default(uuid()) @db.Uuid
  email               String              @unique
  username            String
  password            String
  refreshToken        String
  refreshTokenExpires String
  comments            Comment[]
  responses           ResponseToComment[]
  stories             Story[]
  followedBy          Follows[]           @relation("follower")
  following           Follows[]           @relation("following")
}

model Follows {
  follower    User   @relation("follower", fields: [followerId], references: [id])
  followerId  String @db.Uuid
  following   User   @relation("following", fields: [followingId], references: [id])
  followingId String @db.Uuid

  @@id([followerId, followingId])
}

model Story {
  id         String      @id @default(uuid()) @db.Uuid
  title      String
  resume     String?
  typeId     Int?
  type       Type?       @relation(fields: [typeId], references: [id])
  isPublic   Boolean      @default(false)
  authorId   String      @db.Uuid
  stars      Int?
  categories Category[]
  chapters   Chapter[]
  characters Character[]
  locations  Location[]
  timeline   Timeline[]
  author     User?       @relation(fields: [authorId], references: [id])
}

model Type {
  id      Int     @id @default(autoincrement())
  name    String  @unique
  stories Story[]
}

model Category {
  id      String  @id @default(uuid()) @db.Uuid
  name    String  @unique
  stories Story[]
}

//implicit manyToMany between category and story ===> to test

model Chapter {
  id         String                 @id @default(uuid()) @db.Uuid
  resume     String?
  title      String?
  content    String
  storyId    String                 @db.Uuid
  story      Story                  @relation(fields: [storyId], references: [id])
  notes      Note[]
  comments   Comment[]
  characters ChapterHasCharacters[]
  locations  ChapterHasLocations[]
  timelines  ChapterHasTimelines[]
}

model ChapterHasCharacters {
  chapterId   String    @db.Uuid
  characterId String    @db.Uuid
  chapter     Chapter   @relation(fields: [chapterId], references: [id])
  character   Character @relation(fields: [characterId], references: [id])

  @@id([chapterId, characterId])
}

model ChapterHasLocations {
  chapterId  String   @db.Uuid
  locationId String   @db.Uuid
  chapter    Chapter  @relation(fields: [chapterId], references: [id])
  location   Location @relation(fields: [locationId], references: [id])

  @@id([chapterId, locationId])
}

model ChapterHasTimelines {
  chapterId  String   @db.Uuid
  timelineId String   @db.Uuid
  chapter    Chapter  @relation(fields: [chapterId], references: [id])
  timeline   Timeline @relation(fields: [timelineId], references: [id])

  @@id([chapterId, timelineId])
}

model Character {
  id                  String                 @id @default(uuid()) @db.Uuid
  physicalDescription String
  personality         String
  distinctiveSigns    String
  storyId             String                 @db.Uuid
  story               Story                  @relation(fields: [storyId], references: [id])
  chapters            ChapterHasCharacters[]
}

model Location {
  id          String                @id @default(uuid()) @db.Uuid
  name        String
  description String
  storyId     String                @db.Uuid
  story       Story                 @relation(fields: [storyId], references: [id])
  chapters    ChapterHasLocations[]
}

model Timeline {
  id       String                @id @default(uuid()) @db.Uuid
  period   String
  storyId  String                @db.Uuid
  story    Story                 @relation(fields: [storyId], references: [id])
  chapters ChapterHasTimelines[]

}

model Comment {
  id        String              @id @default(uuid()) @db.Uuid
  content   String
  authorId  String              @db.Uuid
  chapterId String              @db.Uuid
  author    User                @relation(fields: [authorId], references: [id])
  chapter   Chapter             @relation(fields: [chapterId], references: [id])
  responses ResponseToComment[]
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
}

model ResponseToComment {
  id        String   @id @default(uuid()) @db.Uuid
  content   String
  authorId  String   @db.Uuid
  commentId String   @db.Uuid
  author    User     @relation(fields: [authorId], references: [id])
  comment   Comment  @relation(fields: [commentId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Note {
  id        String  @id @default(uuid()) @db.Uuid
  content   String
  chapterId String  @db.Uuid
  chapter   Chapter @relation(fields: [chapterId], references: [id])
}
